1
00:00:02,800 --> 00:00:03,860
最後の講義で。

2
00:00:03,900 --> 00:00:07,710
ここでは独自のコンポーネントを作成しました。

3
00:00:07,710 --> 00:00:15,240
&nbsp;

4
00:00:15,250 --> 00:00:25,200
&nbsp;

5
00:00:25,260 --> 00:00:29,390
それはほとんど使用する準備ができているが、それを使用するには、アプリケーションモジュールについて何かを変更する必要があります。AIRは、Webページを構築するために古いコンポーネントを使用し、モジュールを使用して基本的にアプリのコンポーネントをパッケージにバンドルします。

6
00:00:29,550 --> 00:00:34,320
&nbsp;

7
00:00:34,320 --> 00:00:40,920
&nbsp;

8
00:00:40,920 --> 00:00:46,080
あなたはこれが高度な機能の一種であることは承知していますが、コースの後半では、このコースの大部分のモジュールについてのセクション全体を持っていきます。より大きなプロジェクトでのみ多くのプロジェクトで絶対にうまくいくアプリケーションモジュールを使用します。あなたのアプリを複数のaapkeモジュールに分割することについて考えてみてください。

9
00:00:46,160 --> 00:00:47,340
&nbsp;

10
00:00:47,580 --> 00:00:51,170
しかし、このアプリはモジュールとは何をするのでしょうか？

11
00:00:51,600 --> 00:00:58,890
&nbsp;

12
00:00:59,010 --> 00:01:05,850
&nbsp;

13
00:01:06,060 --> 00:01:12,900
さて、それは私のアプリの機能のバンドルと言ったように、基本的にイングランドに私のアプリが持っている機能を持つ情報を提供しています。あなたはそれがすべてコンポーネントのような空のtypescriptクラスであり、ここにデコレータを追加する。

14
00:01:13,020 --> 00:01:19,300
これはAngyのモジュールデコレータで、角度のあるコアからもインポートされます。

15
00:01:19,320 --> 00:01:27,450
ここでは、モジュール宣言のインポートプロバイダとブートストラップに渡したオブジェクトに設定した4つのプロパティがあります。

16
00:01:27,450 --> 00:01:29,350
&nbsp;

17
00:01:29,430 --> 00:01:35,640
私たちはブートストラップを見ました。これは、アプリケーション全体が開始された時点でどのコンポーネントを認識すべきか、怒りを抱かせる原因となりました。

18
00:01:35,640 --> 00:01:39,240
&nbsp;

19
00:01:39,240 --> 00:01:43,050
だから、あなたは基本的に極限親極で認識されるでしょう。

20
00:01:43,200 --> 00:01:45,330
それがappコンポーネントでした。

21
00:01:45,360 --> 00:01:51,020
今私はすでに、次のHDMIファイルにコンポーネントセレクタを追加しないと述べました。

22
00:01:51,030 --> 00:01:53,040
それはちょうどそれがいかに働くかではない。

23
00:01:53,160 --> 00:01:56,010
したがって、実際にはブートストラップする必要があります。

24
00:01:56,340 --> 00:02:03,360
それでもなお、新しいコンポーネントを追加しました。この新しいコンポーネントはここでモジュールに登録する必要がありました。このコンポーネントが存在することを釣り人は知っていました。これはデフォルトでEnglerがすべてのファイルをスキャンしないためです。

25
00:02:03,360 --> 00:02:10,500
&nbsp;

26
00:02:10,530 --> 00:02:13,410
&nbsp;

27
00:02:13,680 --> 00:02:20,510
したがって、サーバーコンポーネントが存在していることを知らせなければ、それはわかりません。

28
00:02:20,550 --> 00:02:23,430
ファイルを作成するだけでは不十分です。

29
00:02:23,490 --> 00:02:30,750
ですから、ここではNGIモジュールに登録してEngler

30
00:02:30,750 --> 00:02:36,390
Heyにこのモジュールの一部を伝える必要があります。

31
00:02:36,900 --> 00:02:41,490
この宣言配列に新しいコンポーネントを登録します。

32
00:02:41,730 --> 00:02:47,010
私たちは既にブートストラップで使用されているにもかかわらず、アプリケーションコンポーネントをここに登録しています。

33
00:02:47,010 --> 00:02:48,660
&nbsp;

34
00:02:48,660 --> 00:02:52,880
ここでサーバーコンポーネントを追加する必要もあります。

35
00:02:53,790 --> 00:02:59,310
&nbsp;

36
00:02:59,310 --> 00:03:04,850
これを追加するだけでは十分ではありませんが、今や釣り人はこれがアプリの一部であることを知っているだろうが、タイプスクリプトはこのタイプをどこで見つけるべきかを知りません。

37
00:03:04,860 --> 00:03:12,990
したがって、コードをバンドルしようとするとエラーが発生しますが、実際に再コンパイルをトリガーしたかどうかを確認することができます。

38
00:03:12,990 --> 00:03:14,380
&nbsp;

39
00:03:14,430 --> 00:03:20,110
ターミナルにはサーバコンポーネントが見つからないというエラーが表示されます。

40
00:03:20,180 --> 00:03:22,130
そして、これは釣り人ではなく、このタイプのストロークですか？

41
00:03:22,200 --> 00:03:25,800
このファイルがどこにあるかはわかりません。

42
00:03:26,010 --> 00:03:30,710
したがって、手動でこれを指している上部にインポートを追加する必要があります。

43
00:03:30,840 --> 00:03:41,340
&nbsp;

44
00:03:41,520 --> 00:03:48,110
&nbsp;

45
00:03:48,110 --> 00:03:55,110
そこで、ここではサーバコンポーネントをドットスラッシュサーバからインポートし、サーバコンポーネントにインポートしてドットTSを指定します。インポートするにはドットを追加しないでくださいサーバのドットコンポーネントなので拡張子なしのファイル名私たちのプロジェクトを自動的に束ねるウェブバッグによって追加されます。

46
00:03:55,110 --> 00:03:57,030
だからこれで、それはとても重要です。

47
00:03:57,030 --> 00:04:01,790
これは終了しないか、タイプスクリプトのタイプフィーチャーで、タイプスクリプトはこれを見つける場所を知っています。

48
00:04:01,830 --> 00:04:08,580
したがって、すべてをバンドルすることができるので、Englerは実行時にサーバーコンポーネントを持っていることを知っています。これはアプリケーションの一部です。

49
00:04:08,580 --> 00:04:11,030
&nbsp;

50
00:04:11,190 --> 00:04:14,390
これで我々は最終的に私たちのコンポーネントを使用できるようになりました。

51
00:04:14,670 --> 00:04:16,190
次の講義でこれを行います。

52
00:04:16,200 --> 00:04:21,530
しかし、おそらくあなたはまた、ここで私たちにどのような輸入とプロバイダがモジュール内にあるのか疑問に思います。

53
00:04:21,600 --> 00:04:28,260
私は後でサービスセクションのインポートに戻ってプロバイダに戻ってきます。単にAlberモジュールを追加するだけです。

54
00:04:28,260 --> 00:04:29,180
&nbsp;

55
00:04:29,220 --> 00:04:34,500
&nbsp;

56
00:04:34,530 --> 00:04:40,710
あなたがアプリを複数のモジュールに分割し、これらのモジュールをインポートして基本的にこのモジュラービットをよりリーンにし、いくつかのものを別のモジュールにアウトソースすることができると言ったからです。

57
00:04:40,710 --> 00:04:43,550
今私はあなたには1つのモジュールだけを使うつもりだと言った。

58
00:04:43,590 --> 00:04:45,450
それでは、ここで何を輸入しているのですか？

59
00:04:45,450 --> 00:04:51,630
&nbsp;

60
00:04:51,630 --> 00:04:58,280
&nbsp;

61
00:04:58,270 --> 00:05:02,210
角型はモジュールに分割されているため、角型に組み込まれているモジュールもあります。たとえば、ブラウザモジュールでは、アプリケーションやフォームを開始するために必要なすべての基本機能と、HTPモジュールを提供しています。コース。

62
00:05:02,220 --> 00:05:07,890
ですから、この3月の基礎については、何日か後にもう一度明らかにする必要があります。

63
00:05:07,890 --> 00:05:08,530
&nbsp;

64
00:05:08,700 --> 00:05:11,160
また、独自のコンポーネントを登録します。

65
00:05:11,280 --> 00:05:13,500
今度はそれを次の講義で使ってみましょう。

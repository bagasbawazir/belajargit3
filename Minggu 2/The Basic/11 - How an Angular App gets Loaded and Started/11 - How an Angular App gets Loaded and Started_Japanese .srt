1
00:00:03,300 --> 00:00:09,760
Sell

2
00:00:10,340 --> 00:00:18,340
daysは、私たちが現地ホストで4200日に達するガイドを完成させるために空のページ年の最後のセクションの最後に作成したプロジェクトでは、SelyeまたはTACLによってスピンアップされました。

3
00:00:18,340 --> 00:00:25,650
&nbsp;

4
00:00:25,750 --> 00:00:32,940
ここで見ているコンテンツは、アプリケーションフォルダのファイルのappコンポーネントHVMに移動して変更することができます。ここで、年齢のないタグと通常のHVM

5
00:00:33,640 --> 00:00:40,810
Altecのappコンポーネントでテキストを出力できます。

6
00:00:40,840 --> 00:00:41,730
&nbsp;

7
00:00:41,740 --> 00:00:49,240
したがって、これを保存すると、ここに表示されます。最後のセクションの最後にブートストラップを追加したので、自動的にブートストラップする必要があります。

8
00:00:49,240 --> 00:00:52,600
&nbsp;

9
00:00:52,990 --> 00:00:58,630
しかし、はい、それは私たちがここでそれを見ていることは一種のように思えるかもしれません。

10
00:00:58,720 --> 00:01:05,800
私たちのブラウザをどのようにして、私たちのアプリケーションをホストするサーバーは、ここにすべてのアプリケーションコンポーネントHVMのコンテンツをレンダリングすべきであることを知っていますか？

11
00:01:06,160 --> 00:01:08,450
&nbsp;

12
00:01:08,530 --> 00:01:13,690
あなたはそれが私たちが現在持っている唯一のコンポーネントだと主張することができます。そして、すぐにコンポーネントを詳しく見ていきます。

13
00:01:13,690 --> 00:01:14,390
&nbsp;

14
00:01:14,740 --> 00:01:16,630
しかしそれが理由ではありません。

15
00:01:16,630 --> 00:01:20,730
実際、これはサーバーが提供するファイルではありません。

16
00:01:20,740 --> 00:01:27,120
代わりにここのインデックスのHDMIファイルは、サーバーによって提供され、私はangleが単一ページアプリケーションを作成するためのフレームワークであることを覚えていたことを思い出しました。

17
00:01:27,130 --> 00:01:31,080
&nbsp;

18
00:01:31,080 --> 00:01:35,710
これは、インデックスHDMIファイルを提供している単一のページです。

19
00:01:35,710 --> 00:01:40,440
このファイルを見れば、これは通常のHTLファイルであることがわかります。

20
00:01:40,510 --> 00:01:45,130
私たちはブラウザの年のタブで見ることができるタイトルを定義しました。

21
00:01:45,700 --> 00:01:48,350
そして、このファイルの本体はとても面白いです。

22
00:01:48,430 --> 00:01:54,580
ここでは、ドットのドットの間にドットを挿入してこのアプリを失礼にします。

23
00:01:54,580 --> 00:01:58,260
今明らかに私たちはドットドットをここに読み込んでいるのを見ていません。

24
00:01:58,660 --> 00:02:07,300
だから何とかこのインデックスのHVM Ulfarは変わったようだし、Rootieの年のアプリケーションはデフォルトの年齢のHTML要素ではありません。

25
00:02:07,300 --> 00:02:09,170
&nbsp;

26
00:02:09,280 --> 00:02:15,610
代わりに私たち自身のコンポーネントの1つであるように、私たちはすぐに独自のコンポーネントを作成する方法を学びますが、Seelyeは私たちのためにコンポーネントを作成します。

27
00:02:15,620 --> 00:02:17,650
&nbsp;

28
00:02:17,650 --> 00:02:23,170
&nbsp;

29
00:02:23,170 --> 00:02:30,070
コンポーネント全体のアプリケーションを結びつけるコンポーネントへのアプリケーションのルートコンポーネントと、ここにアプリケーションフォルダのすべてのファイル（名前にコンポーネントを含む）。

30
00:02:30,100 --> 00:02:33,490
したがって、これらのファイルはこのコンポーネントに関連しています。

31
00:02:33,490 --> 00:02:37,870
これらのファイルと次の講義のうちの1つについてもっと詳しく説明します。ここでは、appcriptsの考え方をタイプスクリプトファイルに従ったものとして詳しく見ていきましょう。

32
00:02:37,870 --> 00:02:41,710
&nbsp;

33
00:02:41,710 --> 00:02:47,170
&nbsp;

34
00:02:47,170 --> 00:02:55,030
ここでは、コンポーネントデコレータで行う必要があることがわかりますが、もっと重要なことですが、今では、文字列を値として割り当て、文字列を保持するこの選択またはプロパティが存在することがわかります。

35
00:02:55,030 --> 00:02:56,370
&nbsp;

36
00:02:56,480 --> 00:03:01,990
GoogleのインデックスHDMIファイルと同じテキストではないアプリケーションのルート。

37
00:03:02,080 --> 00:03:09,340
&nbsp;

38
00:03:09,340 --> 00:03:16,210
&nbsp;

39
00:03:16,240 --> 00:03:22,210
これは実際にこのインデックスでこの部分を置き換えることができるために必要な情報量です。H-2A私はこのコンポーネントのテンプレートを使ってファイルを作成します。このセレクタを持つコンポーネントはこのコンポーネントのテンプレートですappコンポーネントhファイル。

40
00:03:22,210 --> 00:03:28,120
ここでコンポーネントを作成する方法とコンポーネントを構成する方法について詳しく説明しますが、これは基本的に起動時に発生します。

41
00:03:28,120 --> 00:03:30,550
&nbsp;

42
00:03:30,670 --> 00:03:34,600
欠落している情報は、角度がどのようにトリガされるかです。

43
00:03:34,720 --> 00:03:42,060
これらの索引HVMファイルの実際のところで私たちの体の上を走るために、それはどのようにキックオフされますか？

44
00:03:42,460 --> 00:03:49,240
答えはブラウザのファイルの最後のインデックス時代です。ここでソースコードを調べることで、最終的にいくつかのスクリプトのインポートが得られます。

45
00:03:49,240 --> 00:03:54,570
&nbsp;

46
00:03:54,730 --> 00:03:57,920
これらはシールによって自動的に注入されます。

47
00:03:57,970 --> 00:04:00,920
だからこそ、ここでは未処理のインデックスには表示されません。

48
00:04:00,950 --> 00:04:07,270
mouthfullここではスクリプトのインポートはありませんが、N-GがBurroughsのサービスを再構築するたびにバンドルが作成されます。

49
00:04:07,300 --> 00:04:10,870
HD

50
00:04:10,870 --> 00:04:17,530
Javascriptスクリプトをバンドルし、インデックスHに派生したインポートを自動的に追加します。 T. 私たちのために多少の便利機能を口いっぱいにしました。

51
00:04:17,620 --> 00:04:19,760
&nbsp;

52
00:04:19,930 --> 00:04:28,090
したがって、最終的なファイルには、DSスクリプトのインポートがあり、DSスクリプトのインポートには、これらのスクリプトファイルを販売する独自のコードが含まれています。実行されるスクリプトファイルは実際に実行される最初のコードです。

53
00:04:28,140 --> 00:04:35,820
&nbsp;

54
00:04:35,860 --> 00:04:42,040
それは、メインドットのTSファイルに書き込むコードを書くことだけです。

55
00:04:42,040 --> 00:04:43,500
それがMainと呼ばれる理由です。

56
00:04:43,540 --> 00:04:46,120
これが実行される最初のコードです。

57
00:04:46,360 --> 00:04:48,370
その後、それを詳しく見てみましょう。

58
00:04:48,550 --> 00:04:54,670
ここでは、私たちが生産モードに入っているかどうかを確認してから、いくつかの輸入品が得られることがわかります。

59
00:04:54,700 --> 00:04:58,100
基本的に、私はあなたにそれを伝えることができるいくつかの警告メッセージをオフにします。

60
00:04:58,240 --> 00:05:08,090
しかし、ここで最も重要なのは、この行は現在ブートストラップです。アプリケーションモジュールのチューターMethotとAB

61
00:05:08,090 --> 00:05:14,380
Marchalを渡して角型アプリケーションを開始します。ここではこのファイルを参照しています。

62
00:05:14,630 --> 00:05:23,110
ここでこのファイルを見れば、実際には何とか私たちのようなものを見ています。

63
00:05:23,120 --> 00:05:25,200
&nbsp;

64
00:05:25,220 --> 00:05:28,310
私はこれについてもいくつかの講義でダイビングする予定です。

65
00:05:28,700 --> 00:05:34,970
&nbsp;

66
00:05:35,300 --> 00:05:42,800
&nbsp;

67
00:05:42,890 --> 00:05:44,290
しかし、ここで最も重要なのは、このブートストラップ配列を取得することです。基本的には、Englerが知っておくべきすべてのコンポーネントをリストしています。私たちのインデックスを解析した時点で、円が閉じます。

68
00:05:44,340 --> 00:05:47,840
ここではアプリコンポーネントを参照するためです

69
00:05:48,020 --> 00:05:52,800
だから角度が始まり、TSファイルが開始されます。

70
00:05:52,810 --> 00:06:00,620
私たちはアングラーアプリケーションをブートストラップし、このモジュールをこのモジュールの引数として渡します。あなたは自分自身と角度を開始しようとするときに知っているこのアプリケーションコンポーネントがあります。

71
00:06:00,740 --> 00:06:06,850
&nbsp;

72
00:06:06,860 --> 00:06:15,200
今、このティップコンポーネントを分析して、私たちが1年を過ぎた設定を読み込み、したがってセレクタEBPルートです。

73
00:06:15,530 --> 00:06:22,220
そして、EylerはインデックスHDMIファイルでABルートを扱うことができ、それが分かります。

74
00:06:22,400 --> 00:06:28,280
あなたは私がそれを知っておくべきだと私に言ったことを知ってセレクタは、このコンポーネントのモジュール内のこのブートストラップ配列に記載されています。

75
00:06:28,280 --> 00:06:31,440
&nbsp;

76
00:06:31,460 --> 00:06:37,610
だから今私はここで私はアプリコンポーネントを挿入する必要があり、アプリケーションコンポーネントは、これが治療タグであり、Howlie

77
00:06:37,760 --> 00:06:46,060
Englerアプリケーションが始まることを望むそれに付随するテンプレートをいくつかのHDLコードを持っていることを知っています。

78
00:06:46,130 --> 00:06:48,970
これが私たちが見るものを見る理由です。

79
00:06:49,190 --> 00:06:55,310
&nbsp;

80
00:06:55,730 --> 00:07:01,880
今これはアプリの起動に関する情報の負荷でしたが、この情報からどのように始まるのかを理解することが重要です。コンポーネントが実際にどのように機能するか、独自のアプリケーションを作成する方法、詳しくは。

81
00:07:01,880 --> 00:07:07,880
&nbsp;

82
00:07:08,090 --> 00:07:09,330
だから先に進もう。

1
00:00:02,660 --> 00:00:10,560
En la última conferencia, observamos atentamente lo que sucede en el momento en que nos encontramos con el servidor local 4200

2
00:00:10,620 --> 00:00:12,000
aquí en el navegador.

3
00:00:12,120 --> 00:00:18,480
Entendimos que el archivo HVM índice se sirve que contendrá un conjunto de scripts que

4
00:00:18,480 --> 00:00:24,390
pueden ejecutar ejecutados que luego básicamente inician la aplicación angular. La aplicación dangler obtiene

5
00:00:24,390 --> 00:00:30,840
la información importante. Debe conocer el componente de la aplicación que debe analizar con esa información.

6
00:00:30,900 --> 00:00:36,650
código angular es capaz de analizar este año, aquí hace el componente raíz AB.

7
00:00:36,670 --> 00:00:42,600
Comprende eso e inserta nuestra aplicación de ira en este punto y es por eso que no vemos cargando dot

8
00:00:42,600 --> 00:00:47,190
dot dot que aún estaría en el código fuente de esta página como puedes ver.

9
00:00:47,250 --> 00:00:55,760
Pero en lugar de eso, vemos esto porque angular lo anula en tiempo de ejecución porque también lo que hace

10
00:00:55,780 --> 00:00:57,730
por lo que es SCHABAS.

11
00:00:57,750 --> 00:01:04,500
Entonces, ahora que hemos examinado de cerca este proceso de arranque, echemos un vistazo más de cerca a estos

12
00:01:04,530 --> 00:01:10,460
Cobbold y / o agreguemos componentes y los componentes generales son una característica clave en angular.

13
00:01:10,500 --> 00:01:17,220
Construyes toda tu aplicación computándola a partir de un par de componentes que creas

14
00:01:17,220 --> 00:01:18,260
tú mismo.

15
00:01:18,270 --> 00:01:24,080
Ahora comenzamos con este componente de aplicación, el componente raíz que debería decir que contiene nuestra y

16
00:01:24,080 --> 00:01:26,310
toda nuestra aplicación, básicamente, al final.

17
00:01:26,340 --> 00:01:32,670
Por lo tanto, este componente de la ruta de este componente de la aplicación será el componente donde anidaremos más adelante o agregaremos

18
00:01:32,670 --> 00:01:33,720
también nuestros otros componentes.

19
00:01:33,720 --> 00:01:36,580
Entonces, para esta plantilla, HVM archiva.

20
00:01:36,600 --> 00:01:37,540
Sí componente.

21
00:01:37,560 --> 00:01:41,050
Aquí es donde más adelante agregaremos nuestros otros componentes.

22
00:01:41,160 --> 00:01:46,830
Normalmente, podríamos tener una página web como esta con un encabezado con el hogar y los usuarios, a continuación, un área principal

23
00:01:46,830 --> 00:01:48,370
y una barra lateral tal vez.

24
00:01:48,780 --> 00:01:55,930
Ahora, si lo miramos, sería un componente apropiado para el encabezado y tal vez también los elementos en el cabello podrían ser

25
00:01:55,980 --> 00:01:58,960
los suyos. Podría ser que Kebon no es necesario.

26
00:01:59,010 --> 00:02:06,670
Aprenderá del curso cómo abordar la división de una aplicación en componentes separados.

27
00:02:06,690 --> 00:02:14,280
También tenemos, por supuesto, nuestra área principal, la barra aquí como componentes y esa es la idea central detrás de los

28
00:02:14,490 --> 00:02:15,860
componentes construidos por Engler.

29
00:02:15,870 --> 00:02:21,130
Cada componente tiene su propia plantilla, su propia edad, todos asesinados, tal vez su propio estilo.

30
00:02:21,210 --> 00:02:26,850
Y, lo que es más importante, también su propia lógica de negocios y negocios para gran beneficio.

31
00:02:26,850 --> 00:02:34,180
Nos permite dividir su compleja aplicación su compleja página web en partes reutilizables.

32
00:02:34,200 --> 00:02:39,840
Puede usar un componente más de una vez y eso le permite replicar fácilmente esa lógica comercial.

33
00:02:39,870 --> 00:02:48,090
Replica ese estilo o, en general, crea una pieza finamente controlada en tu aplicación sin tener

34
00:02:48,090 --> 00:02:54,440
que procesar todo en un solo archivo de comandos en un único archivo.

35
00:02:54,480 --> 00:02:59,330
Es muy fácil de actualizar, muy fácil de intercambiar y de nuevo reutilizable.

36
00:02:59,370 --> 00:03:04,890
Así que echemos un vistazo más de cerca a cómo realmente creamos un componente y qué hace

37
00:03:04,890 --> 00:03:06,980
ese componente en la próxima conferencia.

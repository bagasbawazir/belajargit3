1
00:00:02,560 --> 00:00:04,210
コンポーネントは重要です。

2
00:00:04,240 --> 00:00:09,940
そのため、アプリケーションコンポーネントで始めるのは、一方では通常の角度コンポーネントですが、他方ではルートコンポーネントとして機能するため、特別なものです。

3
00:00:09,970 --> 00:00:14,740
&nbsp;

4
00:00:14,800 --> 00:00:20,320
これはラボモジュールとこの靴の配列に参加しています。これは、釣り人が特別な構成要素を嫌うことを伝えています。

5
00:00:20,320 --> 00:00:21,010
&nbsp;

6
00:00:21,100 --> 00:00:26,490
そのコンポーネントをルートコンポーネントとして、アプリケーション全体をブートストラップする必要があります。

7
00:00:26,560 --> 00:00:33,460
したがって、私たちが作成するすべてのコンポーネントは、インデックスhチームに追加されません。また、セレクタはファイルに追加されません。

8
00:00:33,460 --> 00:00:34,600
&nbsp;

9
00:00:34,910 --> 00:00:37,900
セレクターはappコンポーネントに追加されますか？

10
00:00:37,900 --> 00:00:43,940
HDMIはすべて秋になっているので、現在は他の部分を追加しているアプリの基本コンポーネントです。

11
00:00:44,110 --> 00:00:47,970
コンポーネントを追加することについて話をするだけで、追加することができます。

12
00:00:48,130 --> 00:00:53,610
サーバーに関する情報を出力したいとします。

13
00:00:53,710 --> 00:01:00,720
私たちはサーバー管理アプリケーションのバックエンドを構築しており、いくつかのサーバー情報を出力したいと考えています。

14
00:01:00,820 --> 00:01:07,260
だから、私は保存するアプリケーションフォルダのサブフォルダは新しいフォルダではありません一般的に怒りのシールで私はすべてのあなたのアプリRolleiコンテンツは、このアプリのフォルダに入るだろうのでプロジェクト。

15
00:01:07,260 --> 00:01:13,330
&nbsp;

16
00:01:13,540 --> 00:01:17,210
私はそれが私のサーバーコンポーネントを保持するので、それをサーバーと名づけます。

17
00:01:17,260 --> 00:01:18,730
これは良い習慣です。

18
00:01:18,730 --> 00:01:24,910
フォルダ名をコンポーネント名と同じにすると、通常は各コンポーネントに固有のフォルダが必要ですが、それは難しいルールではありませんが、一般的に意味があります。

19
00:01:25,110 --> 00:01:28,280
&nbsp;

20
00:01:28,540 --> 00:01:32,690
ここでサーバーのフォルダに、私のサーバーコンポーネントを追加します。

21
00:01:32,690 --> 00:01:41,110
さて、良い命名規則は、サーバーやコンポーネントの名前を最初に、それからドットとコンポーネントにすることです。後で、角度やアプリケーションにもビルディングブロックが存在することがわかります。

22
00:01:41,200 --> 00:01:47,200
&nbsp;

23
00:01:47,320 --> 00:01:52,030
したがって、このようなファイル名を使用すると、ファイル内の内容を確認するのが非常に簡単になります。

24
00:01:52,270 --> 00:01:55,380
ドットを追加することを忘れないでください。

25
00:01:55,570 --> 00:01:59,780
これはtypescriptのために、あなたがこのコンポーネントを書くことがあるからです。

26
00:02:00,190 --> 00:02:03,020
これで新しいコンポーネント用の空のファイルが作成されました。

27
00:02:03,160 --> 00:02:04,470
どのようにしてコンポーネントを作成しますか？

28
00:02:04,480 --> 00:02:13,370
まず最初に、コンポーネントは単にクラスを隠すだけのクラスで、Englerはここで設定した青写真に基づいてオブジェクトを作成することができます。

29
00:02:13,370 --> 00:02:18,010
&nbsp;

30
00:02:18,010 --> 00:02:22,030
だから、このクラスをエクスポートして、ファイルの外でも使用できるようにしましょう。

31
00:02:22,030 --> 00:02:27,460
前に述べたように、コンポーネントをappコンポーネント内で使用して、たとえばそこに追加することになるためです。

32
00:02:27,460 --> 00:02:28,430
&nbsp;

33
00:02:28,870 --> 00:02:35,020
ここでクラスを追加し、このクラスの名前をserver componentにする必要があります。

34
00:02:35,020 --> 00:02:41,260
この場合も、ここでの命名規則には、コンポーネントの最初のサーバーの名前と記述コンポーネントの名前があります。

35
00:02:41,350 --> 00:02:41,910
&nbsp;

36
00:02:41,920 --> 00:02:46,630
後で我々は角型アプリで異なる名前をつけられるかもしれない他の部品についても学ぶので、

37
00:02:46,630 --> 00:02:47,310
&nbsp;

38
00:02:47,620 --> 00:02:51,340
これは私たちのクラスで、今は普通のタイプのプラスです。

39
00:02:51,370 --> 00:02:53,110
特別なことは何もない。

40
00:02:53,530 --> 00:02:58,100
この釣り人が必要とするすべての情報を持っていないのと同様に、私たちはそれを使うことはできません。

41
00:02:58,330 --> 00:03:04,330
ですから、これは普通のタイスクリプトクラスではなく、何か特別なコンポーネントであるということをアングラーに知らせる何かを加える必要があります。

42
00:03:04,840 --> 00:03:07,640
&nbsp;

43
00:03:08,050 --> 00:03:10,720
これを行うには特別なデコレータを追加します。

44
00:03:10,720 --> 00:03:18,580
デコレータは、コードで使用するHans要素などのクラスを拡張するためのタイプの機能です。

45
00:03:18,580 --> 00:03:19,540
&nbsp;

46
00:03:19,540 --> 00:03:20,970
それはクラスに限られていません。

47
00:03:20,980 --> 00:03:23,690
しかしここでは、クラスデコレータを使用します。

48
00:03:23,740 --> 00:03:30,930
それはコンポーネントデコレータであり、デコレータは常にそれらの前に追加してサインします。

49
00:03:30,950 --> 00:03:36,640
今、このコンポーネントデコレータは、最初から何かが知っているタイプではありません。

50
00:03:36,640 --> 00:03:38,890
だから我々はそれをインポートしなければならない。

51
00:03:39,070 --> 00:03:46,990
私たちは単語を追加しなければなりません。また、インポートはコンポーネントへのアクセスを提供する必要がありますので、コンポーネントからインポートする必要があるため、コンポーネントをインポートする必要があります。

52
00:03:46,990 --> 00:03:52,870
&nbsp;

53
00:03:52,870 --> 00:03:53,770
&nbsp;

54
00:03:53,830 --> 00:03:59,670
したがって、この構文を使用してコンポーネントを選択する必要があります。

55
00:03:59,890 --> 00:04:06,470
そして今、私たちがコンポーネントをインポートするパッケージは角度のあるコアです。

56
00:04:06,730 --> 00:04:11,980
今や、釣り人の船は基本的にそれを機能的にグループ化し、名前が意味するようなコアパッケージがいくつかのパッケージを持ち、角度の中心的な機能のいくつかにアクセスすることができます。

57
00:04:11,980 --> 00:04:17,100
&nbsp;

58
00:04:17,380 --> 00:04:19,820
それで、そのコンポーネントをインポートします。

59
00:04:19,990 --> 00:04:26,550
Days AfricaアフリカのBorlandのデコレータは、このファイルをparesisして、それを理解できるjavascriptにコンパイルするときにタイプコピーすることが知られています。

60
00:04:26,550 --> 00:04:28,720
&nbsp;

61
00:04:28,780 --> 00:04:34,270
今度は、設定をしなくてもそれほど面倒ではないので、javascriptオブジェクトのユダのコンポーネントデコレータを渡す必要があります。

62
00:04:34,300 --> 00:04:38,230
&nbsp;

63
00:04:38,230 --> 00:04:44,320
しかし、ここでは、メタデータとして保存される重要な情報を設定してバックグラウンドでクラスを提供し、このクラスで何をするかをEnglerに伝えます。

64
00:04:44,320 --> 00:04:49,110
&nbsp;

65
00:04:49,240 --> 00:04:53,310
重要な情報の1つがセレクタです。

66
00:04:53,440 --> 00:05:00,730
つまり、基本的には、このコンポーネントを後で平均的なコンポーネントのテンプレートで使用できるHDMIタグです。

67
00:05:00,730 --> 00:05:01,330
&nbsp;

68
00:05:01,330 --> 00:05:03,720
私たちはすぐに行動を見るでしょう。

69
00:05:03,720 --> 00:05:05,670
セレクタは文字列でなければなりません。

70
00:05:05,820 --> 00:05:12,300
ここでは任意の名前を設定することができますが、それがデフォルトの極端な要素などを間違って上書きしないように、それが一意のセレクタであることを確認する必要があります。

71
00:05:12,300 --> 00:05:17,290
&nbsp;

72
00:05:17,370 --> 00:05:25,310
したがって、通常は、サーバーコンポーネントのため、app dashとサーバーのようなフィッティング名を付けます。

73
00:05:25,320 --> 00:05:30,770
これは自分自身のセレクタで、後でこのコンポーネントを他のコンポーネントで使用できるようになりました。

74
00:05:30,780 --> 00:05:32,410
HDMIファイル。

75
00:05:32,820 --> 00:05:39,980
そのセットアップでは、今まで必要だった重要な部分はテンプレートです。ここでLaddは平均的な外部ファイルです。

76
00:05:40,040 --> 00:05:41,890
&nbsp;

77
00:05:41,940 --> 00:05:43,360
私は数字に戻ってきます。

78
00:05:43,370 --> 00:05:49,160
すぐにこれに代わるこの外部ファイルを作成する必要があります。

79
00:05:49,200 --> 00:05:55,190
したがって、同じフォルダ内で、サーバードットコンポーネントを作成し、そのHVMファイルを作成します。

80
00:05:55,200 --> 00:05:59,710
これは、ここに私のコンポーネントのAGMのすべてのコードのテンプレートを保持します。

81
00:05:59,790 --> 00:06:03,990
ここでは基本的に私が望むコンテンツを追加することができます。

82
00:06:03,990 --> 00:06:12,050
たとえば、DSサーバーのコンポーネントをシンプルにして、typescriptファイルに戻すのと同じように、この時代のHTMLファイルを指すことができます。

83
00:06:12,140 --> 00:06:14,520
&nbsp;

84
00:06:14,570 --> 00:06:17,080
これには相対的な道が必要です。

85
00:06:17,120 --> 00:06:19,710
最終的には、すべてウェブピックでバンドルされます。

86
00:06:19,790 --> 00:06:22,690
それで、HTLファイルをどこに見つけるか教えてください。

87
00:06:22,910 --> 00:06:30,680
まあ、ポップのタイプスクリプトに相対的なものは、単にスラッシュ・ドット・サーバーのドット・コンポーネントです。このように、私たちは最初のコンポーネントを作成しました。

88
00:06:30,770 --> 00:06:37,670
&nbsp;

89
00:06:37,850 --> 00:06:44,420
これを使用するには、アプリケーションモデルに没頭し、独自のコンポーネントを使用するために何かを変更する必要があるため、これが何であるかを理解する必要があります。

90
00:06:44,420 --> 00:06:46,980
&nbsp;

91
00:06:47,090 --> 00:06:49,350
次の講義でこれをやりましょう。
